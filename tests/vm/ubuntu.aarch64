#!/usr/bin/env python
#
# Ubuntu aarch64 image
#
# Copyright 2020 Linaro
#
# Authors:
#  Robert Foley <robert.foley@linaro.org>
#  Originally based on ubuntu.i386 Fam Zheng <famz@redhat.com>
#
# This code is licensed under the GPL version 2 or later.  See
# the COPYING file in the top-level directory.
#

import os
import sys
import subprocess
import basevm
from qemu.accel import kvm_available
import time
import aarch64vm

DEFAULT_CONFIG = {
    'cpu'          : "cortex-a57",
    'machine'      : "virt,gic-version=3",
    'install_cmds' : "apt-get update,"\
                     "apt-get build-dep -y qemu,"\
                     "apt-get install -y libfdt-dev flex bison",
    # We increase beyond the default time since during boot
    # it can take some time (many seconds) to log into the VM
    # especially using softmmu.
    'ssh_timeout'  : 60,
}

class UbuntuAarch64VM(basevm.BaseVM):
    name = "ubuntu.aarch64"
    arch = "aarch64"
    image_name = "ubuntu-18.04-server-cloudimg-arm64.img"
    image_link = "https://cloud-images.ubuntu.com/releases/18.04/release/" + image_name
    login_prompt = "ubuntu-aarch64-guest login:"
    BUILD_SCRIPT = """
        set -e;
        cd $(mktemp -d);
        sudo chmod a+r /dev/vdb;
        tar --checkpoint=.10 -xf /dev/vdb;
        ./configure {configure_opts};
        make --output-sync {target} -j{jobs} {verbose};
    """
    def boot(self, img, extra_args=None):
        aarch64vm.create_flash_images(self._tmpdir)
        default_args = aarch64vm.get_pflash_args(self._tmpdir)
        if extra_args:
            extra_args.extend(default_args)
        else:
            extra_args = default_args
        # We always add these performance tweaks
        # because without them, we boot so slowly that we
        # can time out finding the boot efi device.
        if '-smp' not in extra_args and \
           '-smp' not in self._config['extra_args'] and \
           '-smp' not in self._args:
            # Only add if not already there to give caller option to change it.
            extra_args.extend(["-smp", "8"])

        # We have overridden boot() since aarch64 has additional parameters.
        # Call down to the base class method.
        super(UbuntuAarch64VM, self).boot(img, extra_args=extra_args)

    def build_image(self, img):
        os_img = self._download_with_cache(self.image_link)
        img_tmp = img + ".tmp"
        subprocess.check_call(["cp", "-f", os_img, img_tmp])
        subprocess.check_call(["qemu-img", "resize", img_tmp, "+50G"])
        ci_img = self.gen_cloud_init_iso()

        self.boot(img_tmp, extra_args = ["-cdrom", ci_img])
        if self._boot_console:
            self.wait_boot()
        # First command we issue is fix for slow ssh login.
        self.wait_ssh(wait_root=True,
                      cmd="chmod -x /etc/update-motd.d/*")
        # Wait for cloud init to finish
        self.wait_ssh(wait_root=True,
                      cmd="ls /var/lib/cloud/instance/boot-finished")
        self.ssh_root("touch /etc/cloud/cloud-init.disabled")
        # Disable auto upgrades.
        # We want to keep the VM system state stable.
        self.ssh_root('sed -ie \'s/"1"/"0"/g\' /etc/apt/apt.conf.d/20auto-upgrades')
        # If the user chooses *not* to do the second phase,
        # then we will jump right to the graceful shutdown
        if self._config['install_cmds'] != "":
            # Don't check the status in case the guest hang up too quickly
            self.ssh_root("sync && reboot")
            if self._boot_console:
                self.wait_boot()
            self.wait_ssh(wait_root=True)
            self.ssh_root("locale")
            # The previous update sometimes doesn't survive a reboot, so do it again
            self.ssh_root("sed -ie s/^#\ deb-src/deb-src/g /etc/apt/sources.list")

            # Issue the install commands.
            # This can be overriden by the user in the config .yml.
            install_cmds = self._config['install_cmds'].split(',')
            for cmd in install_cmds:
                self.ssh_root(cmd)
        self.graceful_shutdown()
        self.wait()
        os.rename(img_tmp, img)
        return 0

if __name__ == "__main__":
    defaults = aarch64vm.get_config_defaults(UbuntuAarch64VM, DEFAULT_CONFIG)
    sys.exit(basevm.main(UbuntuAarch64VM, defaults))
